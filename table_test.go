package aspect

import (
	"testing"
)

// Declare schemas that can be used package-wide
var users = Table("users",
	Column("id", Serial{}),
	Column("name", String{"Length": 32}),
	Column("password", String{}),
	PrimaryKey("id"),
)

type user struct {
	Id       int64  `db:"id"`
	Name     string `db:"name"`
	Password string `db:"password"`
}

// TODO Just string for now, future Compile()
type compiles interface {
	String() string
}

// A short test for testing that an SQL statement was compiled as expected
func expectedSQL(t *testing.T, stmt compiles, expected string) {
	compiled := stmt.String()
	if compiled != expected {
		t.Errorf("Unexpected SQL statement: %s != %s", compiled, expected)
	}
}

func TestTableSchema(t *testing.T) {
	// Test table properties
	if users.Name != "users" {
		t.Errorf("Unexpected Table name: '%s' != 'users'", users.Name)
	}

	// Test the accessor methods
	userId := users.C["id"]
	if userId.name != "id" {
		t.Errorf("Name of returned column was not 'id': '%s'", userId.name)
	}

	// A pointer to the column's table should have been added
	if userId.table != users {
		t.Errorf("Unexpected Table: %+v", userId.table)
	}

	// TODO Test improper schemas
}

// Test the sql.SelectStatements generated by table.Select() and Select()
func TestTableSelect(t *testing.T) {
	// All three of these select statements should produce the same output
	x := `SELECT "users"."id", "users"."name", "users"."password" FROM "users"`
	expectedSQL(t, users.Select(), x)
	expectedSQL(t, Select(users), x)
	expectedSQL(t, Select(users.C["id"], users.C["name"], users.C["password"]), x)
}

// Test the InsertStatement generated by table.Insert()
func TestTableInsert(t *testing.T) {
	// An example user
	admin := user{1, "admin", "secret"}

	// Insert a single value into the table
	stmt := users.Insert(&admin)
	expectedSQL(
		t,
		stmt,
		`INSERT INTO "users" ("id", "name", "password") VALUES ($1, $2, $3)`,
	)
	// if len(stmt.Args()) != 3 {
	// 	t.Errorf("Expected 3 arguments, received %d", len(stmt.Args()))
	// }
}

// Test DeleteStatement generated by table.Delete()
func TestTableDelete(t *testing.T) {
	// Delete the entire table
	expectedSQL(t, users.Delete(), `DELETE FROM "users"`)

	// Delete a record by primary key
	// admin := user{1, "admin", "secret"}
	// expectedSQL(
	// 	t,
	// 	users.Delete(admin),
	// 	`DELETE FROM "users" WHERE "users"."id" = $1`,
	// )
}
