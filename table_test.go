package aspect

import (
	"testing"
)

// Declare schemas that can be used package-wide
var users = Table("users",
	Column("id", Integer{}),
	Column("name", String{"Length": 32}),
	Column("password", String{}),
	PrimaryKey("id"),
)

// A short test for testing that an SQL statement was generated as expected
func expectedSQL(t *testing.T, generated, expected string) {
	if generated != expected {
		t.Errorf("Unexpected SQL statement: %s != %s", generated, expected)
	}
}

func TestTableSchema(t *testing.T) {
	// Test table properties
	if users.Name != "users" {
		t.Errorf("Unexpected Table name: '%s' != 'users'", users.Name)
	}

	// Test the accessor methods
	userId := users.C["id"]
	if userId.Name != "id" {
		t.Errorf("Name of returned column was not 'id': '%s'", userId.Name)
	}

	// A pointer to the column's table should have been added
	if userId.table != users {
		t.Errorf("Unexpected Table: %+v", userId.table)
	}

	// TODO Test improper schemas
}

// Test the sql.SelectStatements generated by table.Select() and sql.Select()
func TestTableSelect(t *testing.T) {
	// All three of these select statements should produce the same output
	x := `SELECT "users"."id", "users"."name", "users"."password" FROM "users"`

	expectedSQL(t, users.Select().String(), x)

	expectedSQL(t, Select(users).String(), x)

	sCol := Select(users.C["id"], users.C["name"], users.C["password"])
	expectedSQL(t, sCol.String(), x)
}

// Test the sql.DeleteStatements generated by table.Delete()
func TestTableDelete(t *testing.T) {
	// Delete the entire table
	expectedSQL(t, users.Delete().String(), `DELETE FROM "users"`)
}
